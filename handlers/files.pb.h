// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: files.proto

#ifndef PROTOBUF_files_2eproto__INCLUDED
#define PROTOBUF_files_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace files {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_files_2eproto();
void protobuf_AssignDesc_files_2eproto();
void protobuf_ShutdownFile_files_2eproto();

class FilesInfo;
class GetRequest;
class KsongAudiosGetRequest;
class KsongAudiosUploadRequest;
class PostRequest;

// ===================================================================

class PostRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:files.PostRequest) */ {
 public:
  PostRequest();
  virtual ~PostRequest();

  PostRequest(const PostRequest& from);

  inline PostRequest& operator=(const PostRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PostRequest& default_instance();

  void Swap(PostRequest* other);

  // implements Message ----------------------------------------------

  inline PostRequest* New() const { return New(NULL); }

  PostRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PostRequest& from);
  void MergeFrom(const PostRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PostRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string biz_name = 1;
  void clear_biz_name();
  static const int kBizNameFieldNumber = 1;
  const ::std::string& biz_name() const;
  void set_biz_name(const ::std::string& value);
  void set_biz_name(const char* value);
  void set_biz_name(const char* value, size_t size);
  ::std::string* mutable_biz_name();
  ::std::string* release_biz_name();
  void set_allocated_biz_name(::std::string* biz_name);

  // optional string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional uint32 seq = 3;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // optional uint32 length = 4;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:files.PostRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr biz_name_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_files_2eproto();
  friend void protobuf_AssignDesc_files_2eproto();
  friend void protobuf_ShutdownFile_files_2eproto();

  void InitAsDefaultInstance();
  static PostRequest* default_instance_;
};
// -------------------------------------------------------------------

class FilesInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:files.FilesInfo) */ {
 public:
  FilesInfo();
  virtual ~FilesInfo();

  FilesInfo(const FilesInfo& from);

  inline FilesInfo& operator=(const FilesInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilesInfo& default_instance();

  void Swap(FilesInfo* other);

  // implements Message ----------------------------------------------

  inline FilesInfo* New() const { return New(NULL); }

  FilesInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilesInfo& from);
  void MergeFrom(const FilesInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FilesInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // optional string url = 2;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint32 upload_status = 3;
  void clear_upload_status();
  static const int kUploadStatusFieldNumber = 3;
  ::google::protobuf::uint32 upload_status() const;
  void set_upload_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:files.FilesInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint32 upload_status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_files_2eproto();
  friend void protobuf_AssignDesc_files_2eproto();
  friend void protobuf_ShutdownFile_files_2eproto();

  void InitAsDefaultInstance();
  static FilesInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:files.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  void Swap(GetRequest* other);

  // implements Message ----------------------------------------------

  inline GetRequest* New() const { return New(NULL); }

  GetRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string biz_name = 1;
  void clear_biz_name();
  static const int kBizNameFieldNumber = 1;
  const ::std::string& biz_name() const;
  void set_biz_name(const ::std::string& value);
  void set_biz_name(const char* value);
  void set_biz_name(const char* value, size_t size);
  ::std::string* mutable_biz_name();
  ::std::string* release_biz_name();
  void set_allocated_biz_name(::std::string* biz_name);

  // optional string file_id = 2;
  void clear_file_id();
  static const int kFileIdFieldNumber = 2;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // @@protoc_insertion_point(class_scope:files.GetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr biz_name_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_files_2eproto();
  friend void protobuf_AssignDesc_files_2eproto();
  friend void protobuf_ShutdownFile_files_2eproto();

  void InitAsDefaultInstance();
  static GetRequest* default_instance_;
};
// -------------------------------------------------------------------

class KsongAudiosUploadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:files.KsongAudiosUploadRequest) */ {
 public:
  KsongAudiosUploadRequest();
  virtual ~KsongAudiosUploadRequest();

  KsongAudiosUploadRequest(const KsongAudiosUploadRequest& from);

  inline KsongAudiosUploadRequest& operator=(const KsongAudiosUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KsongAudiosUploadRequest& default_instance();

  void Swap(KsongAudiosUploadRequest* other);

  // implements Message ----------------------------------------------

  inline KsongAudiosUploadRequest* New() const { return New(NULL); }

  KsongAudiosUploadRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KsongAudiosUploadRequest& from);
  void MergeFrom(const KsongAudiosUploadRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KsongAudiosUploadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 song_id = 1;
  void clear_song_id();
  static const int kSongIdFieldNumber = 1;
  ::google::protobuf::uint32 song_id() const;
  void set_song_id(::google::protobuf::uint32 value);

  // optional string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:files.KsongAudiosUploadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 song_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_files_2eproto();
  friend void protobuf_AssignDesc_files_2eproto();
  friend void protobuf_ShutdownFile_files_2eproto();

  void InitAsDefaultInstance();
  static KsongAudiosUploadRequest* default_instance_;
};
// -------------------------------------------------------------------

class KsongAudiosGetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:files.KsongAudiosGetRequest) */ {
 public:
  KsongAudiosGetRequest();
  virtual ~KsongAudiosGetRequest();

  KsongAudiosGetRequest(const KsongAudiosGetRequest& from);

  inline KsongAudiosGetRequest& operator=(const KsongAudiosGetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KsongAudiosGetRequest& default_instance();

  void Swap(KsongAudiosGetRequest* other);

  // implements Message ----------------------------------------------

  inline KsongAudiosGetRequest* New() const { return New(NULL); }

  KsongAudiosGetRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KsongAudiosGetRequest& from);
  void MergeFrom(const KsongAudiosGetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KsongAudiosGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // @@protoc_insertion_point(class_scope:files.KsongAudiosGetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_files_2eproto();
  friend void protobuf_AssignDesc_files_2eproto();
  friend void protobuf_ShutdownFile_files_2eproto();

  void InitAsDefaultInstance();
  static KsongAudiosGetRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PostRequest

// optional string biz_name = 1;
inline void PostRequest::clear_biz_name() {
  biz_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostRequest::biz_name() const {
  // @@protoc_insertion_point(field_get:files.PostRequest.biz_name)
  return biz_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostRequest::set_biz_name(const ::std::string& value) {
  
  biz_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.PostRequest.biz_name)
}
inline void PostRequest::set_biz_name(const char* value) {
  
  biz_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.PostRequest.biz_name)
}
inline void PostRequest::set_biz_name(const char* value, size_t size) {
  
  biz_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.PostRequest.biz_name)
}
inline ::std::string* PostRequest::mutable_biz_name() {
  
  // @@protoc_insertion_point(field_mutable:files.PostRequest.biz_name)
  return biz_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostRequest::release_biz_name() {
  // @@protoc_insertion_point(field_release:files.PostRequest.biz_name)
  
  return biz_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostRequest::set_allocated_biz_name(::std::string* biz_name) {
  if (biz_name != NULL) {
    
  } else {
    
  }
  biz_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), biz_name);
  // @@protoc_insertion_point(field_set_allocated:files.PostRequest.biz_name)
}

// optional string filename = 2;
inline void PostRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostRequest::filename() const {
  // @@protoc_insertion_point(field_get:files.PostRequest.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostRequest::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.PostRequest.filename)
}
inline void PostRequest::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.PostRequest.filename)
}
inline void PostRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.PostRequest.filename)
}
inline ::std::string* PostRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:files.PostRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostRequest::release_filename() {
  // @@protoc_insertion_point(field_release:files.PostRequest.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:files.PostRequest.filename)
}

// optional uint32 seq = 3;
inline void PostRequest::clear_seq() {
  seq_ = 0u;
}
inline ::google::protobuf::uint32 PostRequest::seq() const {
  // @@protoc_insertion_point(field_get:files.PostRequest.seq)
  return seq_;
}
inline void PostRequest::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:files.PostRequest.seq)
}

// optional uint32 length = 4;
inline void PostRequest::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 PostRequest::length() const {
  // @@protoc_insertion_point(field_get:files.PostRequest.length)
  return length_;
}
inline void PostRequest::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:files.PostRequest.length)
}

// optional bytes data = 5;
inline void PostRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostRequest::data() const {
  // @@protoc_insertion_point(field_get:files.PostRequest.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.PostRequest.data)
}
inline void PostRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.PostRequest.data)
}
inline void PostRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.PostRequest.data)
}
inline ::std::string* PostRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:files.PostRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostRequest::release_data() {
  // @@protoc_insertion_point(field_release:files.PostRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:files.PostRequest.data)
}

// -------------------------------------------------------------------

// FilesInfo

// optional string file_id = 1;
inline void FilesInfo::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FilesInfo::file_id() const {
  // @@protoc_insertion_point(field_get:files.FilesInfo.file_id)
  return file_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilesInfo::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.FilesInfo.file_id)
}
inline void FilesInfo::set_file_id(const char* value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.FilesInfo.file_id)
}
inline void FilesInfo::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.FilesInfo.file_id)
}
inline ::std::string* FilesInfo::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:files.FilesInfo.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilesInfo::release_file_id() {
  // @@protoc_insertion_point(field_release:files.FilesInfo.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilesInfo::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:files.FilesInfo.file_id)
}

// optional string url = 2;
inline void FilesInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FilesInfo::url() const {
  // @@protoc_insertion_point(field_get:files.FilesInfo.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilesInfo::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.FilesInfo.url)
}
inline void FilesInfo::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.FilesInfo.url)
}
inline void FilesInfo::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.FilesInfo.url)
}
inline ::std::string* FilesInfo::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:files.FilesInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilesInfo::release_url() {
  // @@protoc_insertion_point(field_release:files.FilesInfo.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilesInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:files.FilesInfo.url)
}

// optional uint32 upload_status = 3;
inline void FilesInfo::clear_upload_status() {
  upload_status_ = 0u;
}
inline ::google::protobuf::uint32 FilesInfo::upload_status() const {
  // @@protoc_insertion_point(field_get:files.FilesInfo.upload_status)
  return upload_status_;
}
inline void FilesInfo::set_upload_status(::google::protobuf::uint32 value) {
  
  upload_status_ = value;
  // @@protoc_insertion_point(field_set:files.FilesInfo.upload_status)
}

// -------------------------------------------------------------------

// GetRequest

// optional string biz_name = 1;
inline void GetRequest::clear_biz_name() {
  biz_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::biz_name() const {
  // @@protoc_insertion_point(field_get:files.GetRequest.biz_name)
  return biz_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_biz_name(const ::std::string& value) {
  
  biz_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.GetRequest.biz_name)
}
inline void GetRequest::set_biz_name(const char* value) {
  
  biz_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.GetRequest.biz_name)
}
inline void GetRequest::set_biz_name(const char* value, size_t size) {
  
  biz_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.GetRequest.biz_name)
}
inline ::std::string* GetRequest::mutable_biz_name() {
  
  // @@protoc_insertion_point(field_mutable:files.GetRequest.biz_name)
  return biz_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_biz_name() {
  // @@protoc_insertion_point(field_release:files.GetRequest.biz_name)
  
  return biz_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_biz_name(::std::string* biz_name) {
  if (biz_name != NULL) {
    
  } else {
    
  }
  biz_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), biz_name);
  // @@protoc_insertion_point(field_set_allocated:files.GetRequest.biz_name)
}

// optional string file_id = 2;
inline void GetRequest::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::file_id() const {
  // @@protoc_insertion_point(field_get:files.GetRequest.file_id)
  return file_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.GetRequest.file_id)
}
inline void GetRequest::set_file_id(const char* value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.GetRequest.file_id)
}
inline void GetRequest::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.GetRequest.file_id)
}
inline ::std::string* GetRequest::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:files.GetRequest.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_file_id() {
  // @@protoc_insertion_point(field_release:files.GetRequest.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:files.GetRequest.file_id)
}

// -------------------------------------------------------------------

// KsongAudiosUploadRequest

// optional uint32 song_id = 1;
inline void KsongAudiosUploadRequest::clear_song_id() {
  song_id_ = 0u;
}
inline ::google::protobuf::uint32 KsongAudiosUploadRequest::song_id() const {
  // @@protoc_insertion_point(field_get:files.KsongAudiosUploadRequest.song_id)
  return song_id_;
}
inline void KsongAudiosUploadRequest::set_song_id(::google::protobuf::uint32 value) {
  
  song_id_ = value;
  // @@protoc_insertion_point(field_set:files.KsongAudiosUploadRequest.song_id)
}

// optional string filename = 2;
inline void KsongAudiosUploadRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KsongAudiosUploadRequest::filename() const {
  // @@protoc_insertion_point(field_get:files.KsongAudiosUploadRequest.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KsongAudiosUploadRequest::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.KsongAudiosUploadRequest.filename)
}
inline void KsongAudiosUploadRequest::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.KsongAudiosUploadRequest.filename)
}
inline void KsongAudiosUploadRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.KsongAudiosUploadRequest.filename)
}
inline ::std::string* KsongAudiosUploadRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:files.KsongAudiosUploadRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KsongAudiosUploadRequest::release_filename() {
  // @@protoc_insertion_point(field_release:files.KsongAudiosUploadRequest.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KsongAudiosUploadRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:files.KsongAudiosUploadRequest.filename)
}

// optional bytes data = 5;
inline void KsongAudiosUploadRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KsongAudiosUploadRequest::data() const {
  // @@protoc_insertion_point(field_get:files.KsongAudiosUploadRequest.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KsongAudiosUploadRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.KsongAudiosUploadRequest.data)
}
inline void KsongAudiosUploadRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.KsongAudiosUploadRequest.data)
}
inline void KsongAudiosUploadRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.KsongAudiosUploadRequest.data)
}
inline ::std::string* KsongAudiosUploadRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:files.KsongAudiosUploadRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KsongAudiosUploadRequest::release_data() {
  // @@protoc_insertion_point(field_release:files.KsongAudiosUploadRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KsongAudiosUploadRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:files.KsongAudiosUploadRequest.data)
}

// -------------------------------------------------------------------

// KsongAudiosGetRequest

// optional string file_id = 1;
inline void KsongAudiosGetRequest::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KsongAudiosGetRequest::file_id() const {
  // @@protoc_insertion_point(field_get:files.KsongAudiosGetRequest.file_id)
  return file_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KsongAudiosGetRequest::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.KsongAudiosGetRequest.file_id)
}
inline void KsongAudiosGetRequest::set_file_id(const char* value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.KsongAudiosGetRequest.file_id)
}
inline void KsongAudiosGetRequest::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.KsongAudiosGetRequest.file_id)
}
inline ::std::string* KsongAudiosGetRequest::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:files.KsongAudiosGetRequest.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KsongAudiosGetRequest::release_file_id() {
  // @@protoc_insertion_point(field_release:files.KsongAudiosGetRequest.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KsongAudiosGetRequest::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:files.KsongAudiosGetRequest.file_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace files

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_files_2eproto__INCLUDED
