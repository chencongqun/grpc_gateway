// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: files.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "files.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace files {

namespace {

const ::google::protobuf::Descriptor* PostRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilesInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilesInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KsongAudiosUploadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KsongAudiosUploadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KsongAudiosGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KsongAudiosGetRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_files_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_files_2eproto() {
  protobuf_AddDesc_files_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "files.proto");
  GOOGLE_CHECK(file != NULL);
  PostRequest_descriptor_ = file->message_type(0);
  static const int PostRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostRequest, biz_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostRequest, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostRequest, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostRequest, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostRequest, data_),
  };
  PostRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PostRequest_descriptor_,
      PostRequest::default_instance_,
      PostRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PostRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostRequest, _is_default_instance_));
  FilesInfo_descriptor_ = file->message_type(1);
  static const int FilesInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilesInfo, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilesInfo, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilesInfo, upload_status_),
  };
  FilesInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FilesInfo_descriptor_,
      FilesInfo::default_instance_,
      FilesInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(FilesInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilesInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilesInfo, _is_default_instance_));
  GetRequest_descriptor_ = file->message_type(2);
  static const int GetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, biz_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, file_id_),
  };
  GetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::default_instance_,
      GetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _is_default_instance_));
  KsongAudiosUploadRequest_descriptor_ = file->message_type(3);
  static const int KsongAudiosUploadRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KsongAudiosUploadRequest, song_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KsongAudiosUploadRequest, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KsongAudiosUploadRequest, data_),
  };
  KsongAudiosUploadRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KsongAudiosUploadRequest_descriptor_,
      KsongAudiosUploadRequest::default_instance_,
      KsongAudiosUploadRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(KsongAudiosUploadRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KsongAudiosUploadRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KsongAudiosUploadRequest, _is_default_instance_));
  KsongAudiosGetRequest_descriptor_ = file->message_type(4);
  static const int KsongAudiosGetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KsongAudiosGetRequest, file_id_),
  };
  KsongAudiosGetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KsongAudiosGetRequest_descriptor_,
      KsongAudiosGetRequest::default_instance_,
      KsongAudiosGetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(KsongAudiosGetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KsongAudiosGetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KsongAudiosGetRequest, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_files_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PostRequest_descriptor_, &PostRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FilesInfo_descriptor_, &FilesInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRequest_descriptor_, &GetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KsongAudiosUploadRequest_descriptor_, &KsongAudiosUploadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KsongAudiosGetRequest_descriptor_, &KsongAudiosGetRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_files_2eproto() {
  delete PostRequest::default_instance_;
  delete PostRequest_reflection_;
  delete FilesInfo::default_instance_;
  delete FilesInfo_reflection_;
  delete GetRequest::default_instance_;
  delete GetRequest_reflection_;
  delete KsongAudiosUploadRequest::default_instance_;
  delete KsongAudiosUploadRequest_reflection_;
  delete KsongAudiosGetRequest::default_instance_;
  delete KsongAudiosGetRequest_reflection_;
}

void protobuf_AddDesc_files_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_files_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013files.proto\022\005files\"\\\n\013PostRequest\022\020\n\010b"
    "iz_name\030\001 \001(\t\022\020\n\010filename\030\002 \001(\t\022\013\n\003seq\030\003"
    " \001(\r\022\016\n\006length\030\004 \001(\r\022\014\n\004data\030\005 \001(\014\"@\n\tFi"
    "lesInfo\022\017\n\007file_id\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\022\025\n"
    "\rupload_status\030\003 \001(\r\"/\n\nGetRequest\022\020\n\010bi"
    "z_name\030\001 \001(\t\022\017\n\007file_id\030\002 \001(\t\"K\n\030KsongAu"
    "diosUploadRequest\022\017\n\007song_id\030\001 \001(\r\022\020\n\010fi"
    "lename\030\002 \001(\t\022\014\n\004data\030\005 \001(\014\"(\n\025KsongAudio"
    "sGetRequest\022\017\n\007file_id\030\001 \001(\t2n\n\014FilesHan"
    "dler\0220\n\004post\022\022.files.PostRequest\032\020.files"
    ".FilesInfo\"\000(\001\022,\n\003get\022\021.files.GetRequest"
    "\032\020.files.FilesInfo\"\0002\222\001\n\022KsongAudiosHand"
    "ler\022\?\n\006upload\022\037.files.KsongAudiosUploadR"
    "equest\032\020.files.FilesInfo\"\000(\001\022;\n\007getinfo\022"
    "\034.files.KsongAudiosGetRequest\032\020.files.Fi"
    "lesInfo\"\000b\006proto3", 617);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "files.proto", &protobuf_RegisterTypes);
  PostRequest::default_instance_ = new PostRequest();
  FilesInfo::default_instance_ = new FilesInfo();
  GetRequest::default_instance_ = new GetRequest();
  KsongAudiosUploadRequest::default_instance_ = new KsongAudiosUploadRequest();
  KsongAudiosGetRequest::default_instance_ = new KsongAudiosGetRequest();
  PostRequest::default_instance_->InitAsDefaultInstance();
  FilesInfo::default_instance_->InitAsDefaultInstance();
  GetRequest::default_instance_->InitAsDefaultInstance();
  KsongAudiosUploadRequest::default_instance_->InitAsDefaultInstance();
  KsongAudiosGetRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_files_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_files_2eproto {
  StaticDescriptorInitializer_files_2eproto() {
    protobuf_AddDesc_files_2eproto();
  }
} static_descriptor_initializer_files_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PostRequest::kBizNameFieldNumber;
const int PostRequest::kFilenameFieldNumber;
const int PostRequest::kSeqFieldNumber;
const int PostRequest::kLengthFieldNumber;
const int PostRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PostRequest::PostRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:files.PostRequest)
}

void PostRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PostRequest::PostRequest(const PostRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:files.PostRequest)
}

void PostRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  biz_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_ = 0u;
  length_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PostRequest::~PostRequest() {
  // @@protoc_insertion_point(destructor:files.PostRequest)
  SharedDtor();
}

void PostRequest::SharedDtor() {
  biz_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PostRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostRequest_descriptor_;
}

const PostRequest& PostRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_files_2eproto();
  return *default_instance_;
}

PostRequest* PostRequest::default_instance_ = NULL;

PostRequest* PostRequest::New(::google::protobuf::Arena* arena) const {
  PostRequest* n = new PostRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PostRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:files.PostRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PostRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PostRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seq_, length_);
  biz_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PostRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:files.PostRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string biz_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_biz_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->biz_name().data(), this->biz_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "files.PostRequest.biz_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // optional string filename = 2;
      case 2: {
        if (tag == 18) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "files.PostRequest.filename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 3;
      case 3: {
        if (tag == 24) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // optional uint32 length = 4;
      case 4: {
        if (tag == 32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:files.PostRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:files.PostRequest)
  return false;
#undef DO_
}

void PostRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:files.PostRequest)
  // optional string biz_name = 1;
  if (this->biz_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->biz_name().data(), this->biz_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.PostRequest.biz_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->biz_name(), output);
  }

  // optional string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.PostRequest.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional uint32 seq = 3;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq(), output);
  }

  // optional uint32 length = 4;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->length(), output);
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:files.PostRequest)
}

::google::protobuf::uint8* PostRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:files.PostRequest)
  // optional string biz_name = 1;
  if (this->biz_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->biz_name().data(), this->biz_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.PostRequest.biz_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->biz_name(), target);
  }

  // optional string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.PostRequest.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional uint32 seq = 3;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq(), target);
  }

  // optional uint32 length = 4;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->length(), target);
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:files.PostRequest)
  return target;
}

int PostRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:files.PostRequest)
  int total_size = 0;

  // optional string biz_name = 1;
  if (this->biz_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->biz_name());
  }

  // optional string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // optional uint32 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());
  }

  // optional uint32 length = 4;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:files.PostRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PostRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PostRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:files.PostRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:files.PostRequest)
    MergeFrom(*source);
  }
}

void PostRequest::MergeFrom(const PostRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:files.PostRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.biz_name().size() > 0) {

    biz_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.biz_name_);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void PostRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:files.PostRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostRequest::CopyFrom(const PostRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:files.PostRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostRequest::IsInitialized() const {

  return true;
}

void PostRequest::Swap(PostRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PostRequest::InternalSwap(PostRequest* other) {
  biz_name_.Swap(&other->biz_name_);
  filename_.Swap(&other->filename_);
  std::swap(seq_, other->seq_);
  std::swap(length_, other->length_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PostRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostRequest_descriptor_;
  metadata.reflection = PostRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PostRequest

// optional string biz_name = 1;
void PostRequest::clear_biz_name() {
  biz_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PostRequest::biz_name() const {
  // @@protoc_insertion_point(field_get:files.PostRequest.biz_name)
  return biz_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PostRequest::set_biz_name(const ::std::string& value) {
  
  biz_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.PostRequest.biz_name)
}
 void PostRequest::set_biz_name(const char* value) {
  
  biz_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.PostRequest.biz_name)
}
 void PostRequest::set_biz_name(const char* value, size_t size) {
  
  biz_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.PostRequest.biz_name)
}
 ::std::string* PostRequest::mutable_biz_name() {
  
  // @@protoc_insertion_point(field_mutable:files.PostRequest.biz_name)
  return biz_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PostRequest::release_biz_name() {
  // @@protoc_insertion_point(field_release:files.PostRequest.biz_name)
  
  return biz_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PostRequest::set_allocated_biz_name(::std::string* biz_name) {
  if (biz_name != NULL) {
    
  } else {
    
  }
  biz_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), biz_name);
  // @@protoc_insertion_point(field_set_allocated:files.PostRequest.biz_name)
}

// optional string filename = 2;
void PostRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PostRequest::filename() const {
  // @@protoc_insertion_point(field_get:files.PostRequest.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PostRequest::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.PostRequest.filename)
}
 void PostRequest::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.PostRequest.filename)
}
 void PostRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.PostRequest.filename)
}
 ::std::string* PostRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:files.PostRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PostRequest::release_filename() {
  // @@protoc_insertion_point(field_release:files.PostRequest.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PostRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:files.PostRequest.filename)
}

// optional uint32 seq = 3;
void PostRequest::clear_seq() {
  seq_ = 0u;
}
 ::google::protobuf::uint32 PostRequest::seq() const {
  // @@protoc_insertion_point(field_get:files.PostRequest.seq)
  return seq_;
}
 void PostRequest::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:files.PostRequest.seq)
}

// optional uint32 length = 4;
void PostRequest::clear_length() {
  length_ = 0u;
}
 ::google::protobuf::uint32 PostRequest::length() const {
  // @@protoc_insertion_point(field_get:files.PostRequest.length)
  return length_;
}
 void PostRequest::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:files.PostRequest.length)
}

// optional bytes data = 5;
void PostRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PostRequest::data() const {
  // @@protoc_insertion_point(field_get:files.PostRequest.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PostRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.PostRequest.data)
}
 void PostRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.PostRequest.data)
}
 void PostRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.PostRequest.data)
}
 ::std::string* PostRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:files.PostRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PostRequest::release_data() {
  // @@protoc_insertion_point(field_release:files.PostRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PostRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:files.PostRequest.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilesInfo::kFileIdFieldNumber;
const int FilesInfo::kUrlFieldNumber;
const int FilesInfo::kUploadStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilesInfo::FilesInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:files.FilesInfo)
}

void FilesInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FilesInfo::FilesInfo(const FilesInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:files.FilesInfo)
}

void FilesInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_status_ = 0u;
}

FilesInfo::~FilesInfo() {
  // @@protoc_insertion_point(destructor:files.FilesInfo)
  SharedDtor();
}

void FilesInfo::SharedDtor() {
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FilesInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilesInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilesInfo_descriptor_;
}

const FilesInfo& FilesInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_files_2eproto();
  return *default_instance_;
}

FilesInfo* FilesInfo::default_instance_ = NULL;

FilesInfo* FilesInfo::New(::google::protobuf::Arena* arena) const {
  FilesInfo* n = new FilesInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:files.FilesInfo)
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_status_ = 0u;
}

bool FilesInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:files.FilesInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "files.FilesInfo.file_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "files.FilesInfo.url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_upload_status;
        break;
      }

      // optional uint32 upload_status = 3;
      case 3: {
        if (tag == 24) {
         parse_upload_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:files.FilesInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:files.FilesInfo)
  return false;
#undef DO_
}

void FilesInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:files.FilesInfo)
  // optional string file_id = 1;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.FilesInfo.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_id(), output);
  }

  // optional string url = 2;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.FilesInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional uint32 upload_status = 3;
  if (this->upload_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->upload_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:files.FilesInfo)
}

::google::protobuf::uint8* FilesInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:files.FilesInfo)
  // optional string file_id = 1;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.FilesInfo.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // optional string url = 2;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.FilesInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional uint32 upload_status = 3;
  if (this->upload_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->upload_status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:files.FilesInfo)
  return target;
}

int FilesInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:files.FilesInfo)
  int total_size = 0;

  // optional string file_id = 1;
  if (this->file_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }

  // optional string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // optional uint32 upload_status = 3;
  if (this->upload_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->upload_status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilesInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:files.FilesInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FilesInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FilesInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:files.FilesInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:files.FilesInfo)
    MergeFrom(*source);
  }
}

void FilesInfo::MergeFrom(const FilesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:files.FilesInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_id().size() > 0) {

    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.upload_status() != 0) {
    set_upload_status(from.upload_status());
  }
}

void FilesInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:files.FilesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilesInfo::CopyFrom(const FilesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:files.FilesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilesInfo::IsInitialized() const {

  return true;
}

void FilesInfo::Swap(FilesInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilesInfo::InternalSwap(FilesInfo* other) {
  file_id_.Swap(&other->file_id_);
  url_.Swap(&other->url_);
  std::swap(upload_status_, other->upload_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilesInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilesInfo_descriptor_;
  metadata.reflection = FilesInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilesInfo

// optional string file_id = 1;
void FilesInfo::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FilesInfo::file_id() const {
  // @@protoc_insertion_point(field_get:files.FilesInfo.file_id)
  return file_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilesInfo::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.FilesInfo.file_id)
}
 void FilesInfo::set_file_id(const char* value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.FilesInfo.file_id)
}
 void FilesInfo::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.FilesInfo.file_id)
}
 ::std::string* FilesInfo::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:files.FilesInfo.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FilesInfo::release_file_id() {
  // @@protoc_insertion_point(field_release:files.FilesInfo.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilesInfo::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:files.FilesInfo.file_id)
}

// optional string url = 2;
void FilesInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FilesInfo::url() const {
  // @@protoc_insertion_point(field_get:files.FilesInfo.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilesInfo::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.FilesInfo.url)
}
 void FilesInfo::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.FilesInfo.url)
}
 void FilesInfo::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.FilesInfo.url)
}
 ::std::string* FilesInfo::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:files.FilesInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FilesInfo::release_url() {
  // @@protoc_insertion_point(field_release:files.FilesInfo.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilesInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:files.FilesInfo.url)
}

// optional uint32 upload_status = 3;
void FilesInfo::clear_upload_status() {
  upload_status_ = 0u;
}
 ::google::protobuf::uint32 FilesInfo::upload_status() const {
  // @@protoc_insertion_point(field_get:files.FilesInfo.upload_status)
  return upload_status_;
}
 void FilesInfo::set_upload_status(::google::protobuf::uint32 value) {
  
  upload_status_ = value;
  // @@protoc_insertion_point(field_set:files.FilesInfo.upload_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kBizNameFieldNumber;
const int GetRequest::kFileIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:files.GetRequest)
}

void GetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:files.GetRequest)
}

void GetRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  biz_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:files.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  biz_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_files_2eproto();
  return *default_instance_;
}

GetRequest* GetRequest::default_instance_ = NULL;

GetRequest* GetRequest::New(::google::protobuf::Arena* arena) const {
  GetRequest* n = new GetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:files.GetRequest)
  biz_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:files.GetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string biz_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_biz_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->biz_name().data(), this->biz_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "files.GetRequest.biz_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_id;
        break;
      }

      // optional string file_id = 2;
      case 2: {
        if (tag == 18) {
         parse_file_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "files.GetRequest.file_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:files.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:files.GetRequest)
  return false;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:files.GetRequest)
  // optional string biz_name = 1;
  if (this->biz_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->biz_name().data(), this->biz_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.GetRequest.biz_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->biz_name(), output);
  }

  // optional string file_id = 2;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.GetRequest.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:files.GetRequest)
}

::google::protobuf::uint8* GetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:files.GetRequest)
  // optional string biz_name = 1;
  if (this->biz_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->biz_name().data(), this->biz_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.GetRequest.biz_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->biz_name(), target);
  }

  // optional string file_id = 2;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.GetRequest.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:files.GetRequest)
  return target;
}

int GetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:files.GetRequest)
  int total_size = 0;

  // optional string biz_name = 1;
  if (this->biz_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->biz_name());
  }

  // optional string file_id = 2;
  if (this->file_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:files.GetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:files.GetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:files.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:files.GetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.biz_name().size() > 0) {

    biz_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.biz_name_);
  }
  if (from.file_id().size() > 0) {

    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:files.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:files.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {

  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  biz_name_.Swap(&other->biz_name_);
  file_id_.Swap(&other->file_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRequest

// optional string biz_name = 1;
void GetRequest::clear_biz_name() {
  biz_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetRequest::biz_name() const {
  // @@protoc_insertion_point(field_get:files.GetRequest.biz_name)
  return biz_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_biz_name(const ::std::string& value) {
  
  biz_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.GetRequest.biz_name)
}
 void GetRequest::set_biz_name(const char* value) {
  
  biz_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.GetRequest.biz_name)
}
 void GetRequest::set_biz_name(const char* value, size_t size) {
  
  biz_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.GetRequest.biz_name)
}
 ::std::string* GetRequest::mutable_biz_name() {
  
  // @@protoc_insertion_point(field_mutable:files.GetRequest.biz_name)
  return biz_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetRequest::release_biz_name() {
  // @@protoc_insertion_point(field_release:files.GetRequest.biz_name)
  
  return biz_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_allocated_biz_name(::std::string* biz_name) {
  if (biz_name != NULL) {
    
  } else {
    
  }
  biz_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), biz_name);
  // @@protoc_insertion_point(field_set_allocated:files.GetRequest.biz_name)
}

// optional string file_id = 2;
void GetRequest::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetRequest::file_id() const {
  // @@protoc_insertion_point(field_get:files.GetRequest.file_id)
  return file_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.GetRequest.file_id)
}
 void GetRequest::set_file_id(const char* value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.GetRequest.file_id)
}
 void GetRequest::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.GetRequest.file_id)
}
 ::std::string* GetRequest::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:files.GetRequest.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetRequest::release_file_id() {
  // @@protoc_insertion_point(field_release:files.GetRequest.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:files.GetRequest.file_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KsongAudiosUploadRequest::kSongIdFieldNumber;
const int KsongAudiosUploadRequest::kFilenameFieldNumber;
const int KsongAudiosUploadRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KsongAudiosUploadRequest::KsongAudiosUploadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:files.KsongAudiosUploadRequest)
}

void KsongAudiosUploadRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KsongAudiosUploadRequest::KsongAudiosUploadRequest(const KsongAudiosUploadRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:files.KsongAudiosUploadRequest)
}

void KsongAudiosUploadRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  song_id_ = 0u;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KsongAudiosUploadRequest::~KsongAudiosUploadRequest() {
  // @@protoc_insertion_point(destructor:files.KsongAudiosUploadRequest)
  SharedDtor();
}

void KsongAudiosUploadRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KsongAudiosUploadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KsongAudiosUploadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KsongAudiosUploadRequest_descriptor_;
}

const KsongAudiosUploadRequest& KsongAudiosUploadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_files_2eproto();
  return *default_instance_;
}

KsongAudiosUploadRequest* KsongAudiosUploadRequest::default_instance_ = NULL;

KsongAudiosUploadRequest* KsongAudiosUploadRequest::New(::google::protobuf::Arena* arena) const {
  KsongAudiosUploadRequest* n = new KsongAudiosUploadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KsongAudiosUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:files.KsongAudiosUploadRequest)
  song_id_ = 0u;
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KsongAudiosUploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:files.KsongAudiosUploadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 song_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &song_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // optional string filename = 2;
      case 2: {
        if (tag == 18) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "files.KsongAudiosUploadRequest.filename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:files.KsongAudiosUploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:files.KsongAudiosUploadRequest)
  return false;
#undef DO_
}

void KsongAudiosUploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:files.KsongAudiosUploadRequest)
  // optional uint32 song_id = 1;
  if (this->song_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->song_id(), output);
  }

  // optional string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.KsongAudiosUploadRequest.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:files.KsongAudiosUploadRequest)
}

::google::protobuf::uint8* KsongAudiosUploadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:files.KsongAudiosUploadRequest)
  // optional uint32 song_id = 1;
  if (this->song_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->song_id(), target);
  }

  // optional string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.KsongAudiosUploadRequest.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:files.KsongAudiosUploadRequest)
  return target;
}

int KsongAudiosUploadRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:files.KsongAudiosUploadRequest)
  int total_size = 0;

  // optional uint32 song_id = 1;
  if (this->song_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->song_id());
  }

  // optional string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KsongAudiosUploadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:files.KsongAudiosUploadRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KsongAudiosUploadRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KsongAudiosUploadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:files.KsongAudiosUploadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:files.KsongAudiosUploadRequest)
    MergeFrom(*source);
  }
}

void KsongAudiosUploadRequest::MergeFrom(const KsongAudiosUploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:files.KsongAudiosUploadRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.song_id() != 0) {
    set_song_id(from.song_id());
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void KsongAudiosUploadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:files.KsongAudiosUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KsongAudiosUploadRequest::CopyFrom(const KsongAudiosUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:files.KsongAudiosUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KsongAudiosUploadRequest::IsInitialized() const {

  return true;
}

void KsongAudiosUploadRequest::Swap(KsongAudiosUploadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KsongAudiosUploadRequest::InternalSwap(KsongAudiosUploadRequest* other) {
  std::swap(song_id_, other->song_id_);
  filename_.Swap(&other->filename_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KsongAudiosUploadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KsongAudiosUploadRequest_descriptor_;
  metadata.reflection = KsongAudiosUploadRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KsongAudiosUploadRequest

// optional uint32 song_id = 1;
void KsongAudiosUploadRequest::clear_song_id() {
  song_id_ = 0u;
}
 ::google::protobuf::uint32 KsongAudiosUploadRequest::song_id() const {
  // @@protoc_insertion_point(field_get:files.KsongAudiosUploadRequest.song_id)
  return song_id_;
}
 void KsongAudiosUploadRequest::set_song_id(::google::protobuf::uint32 value) {
  
  song_id_ = value;
  // @@protoc_insertion_point(field_set:files.KsongAudiosUploadRequest.song_id)
}

// optional string filename = 2;
void KsongAudiosUploadRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KsongAudiosUploadRequest::filename() const {
  // @@protoc_insertion_point(field_get:files.KsongAudiosUploadRequest.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KsongAudiosUploadRequest::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.KsongAudiosUploadRequest.filename)
}
 void KsongAudiosUploadRequest::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.KsongAudiosUploadRequest.filename)
}
 void KsongAudiosUploadRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.KsongAudiosUploadRequest.filename)
}
 ::std::string* KsongAudiosUploadRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:files.KsongAudiosUploadRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KsongAudiosUploadRequest::release_filename() {
  // @@protoc_insertion_point(field_release:files.KsongAudiosUploadRequest.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KsongAudiosUploadRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:files.KsongAudiosUploadRequest.filename)
}

// optional bytes data = 5;
void KsongAudiosUploadRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KsongAudiosUploadRequest::data() const {
  // @@protoc_insertion_point(field_get:files.KsongAudiosUploadRequest.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KsongAudiosUploadRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.KsongAudiosUploadRequest.data)
}
 void KsongAudiosUploadRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.KsongAudiosUploadRequest.data)
}
 void KsongAudiosUploadRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.KsongAudiosUploadRequest.data)
}
 ::std::string* KsongAudiosUploadRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:files.KsongAudiosUploadRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KsongAudiosUploadRequest::release_data() {
  // @@protoc_insertion_point(field_release:files.KsongAudiosUploadRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KsongAudiosUploadRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:files.KsongAudiosUploadRequest.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KsongAudiosGetRequest::kFileIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KsongAudiosGetRequest::KsongAudiosGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:files.KsongAudiosGetRequest)
}

void KsongAudiosGetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KsongAudiosGetRequest::KsongAudiosGetRequest(const KsongAudiosGetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:files.KsongAudiosGetRequest)
}

void KsongAudiosGetRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KsongAudiosGetRequest::~KsongAudiosGetRequest() {
  // @@protoc_insertion_point(destructor:files.KsongAudiosGetRequest)
  SharedDtor();
}

void KsongAudiosGetRequest::SharedDtor() {
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KsongAudiosGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KsongAudiosGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KsongAudiosGetRequest_descriptor_;
}

const KsongAudiosGetRequest& KsongAudiosGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_files_2eproto();
  return *default_instance_;
}

KsongAudiosGetRequest* KsongAudiosGetRequest::default_instance_ = NULL;

KsongAudiosGetRequest* KsongAudiosGetRequest::New(::google::protobuf::Arena* arena) const {
  KsongAudiosGetRequest* n = new KsongAudiosGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KsongAudiosGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:files.KsongAudiosGetRequest)
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KsongAudiosGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:files.KsongAudiosGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "files.KsongAudiosGetRequest.file_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:files.KsongAudiosGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:files.KsongAudiosGetRequest)
  return false;
#undef DO_
}

void KsongAudiosGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:files.KsongAudiosGetRequest)
  // optional string file_id = 1;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.KsongAudiosGetRequest.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:files.KsongAudiosGetRequest)
}

::google::protobuf::uint8* KsongAudiosGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:files.KsongAudiosGetRequest)
  // optional string file_id = 1;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "files.KsongAudiosGetRequest.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:files.KsongAudiosGetRequest)
  return target;
}

int KsongAudiosGetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:files.KsongAudiosGetRequest)
  int total_size = 0;

  // optional string file_id = 1;
  if (this->file_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KsongAudiosGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:files.KsongAudiosGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KsongAudiosGetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KsongAudiosGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:files.KsongAudiosGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:files.KsongAudiosGetRequest)
    MergeFrom(*source);
  }
}

void KsongAudiosGetRequest::MergeFrom(const KsongAudiosGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:files.KsongAudiosGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_id().size() > 0) {

    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
}

void KsongAudiosGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:files.KsongAudiosGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KsongAudiosGetRequest::CopyFrom(const KsongAudiosGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:files.KsongAudiosGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KsongAudiosGetRequest::IsInitialized() const {

  return true;
}

void KsongAudiosGetRequest::Swap(KsongAudiosGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KsongAudiosGetRequest::InternalSwap(KsongAudiosGetRequest* other) {
  file_id_.Swap(&other->file_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KsongAudiosGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KsongAudiosGetRequest_descriptor_;
  metadata.reflection = KsongAudiosGetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KsongAudiosGetRequest

// optional string file_id = 1;
void KsongAudiosGetRequest::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KsongAudiosGetRequest::file_id() const {
  // @@protoc_insertion_point(field_get:files.KsongAudiosGetRequest.file_id)
  return file_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KsongAudiosGetRequest::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:files.KsongAudiosGetRequest.file_id)
}
 void KsongAudiosGetRequest::set_file_id(const char* value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:files.KsongAudiosGetRequest.file_id)
}
 void KsongAudiosGetRequest::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:files.KsongAudiosGetRequest.file_id)
}
 ::std::string* KsongAudiosGetRequest::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:files.KsongAudiosGetRequest.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KsongAudiosGetRequest::release_file_id() {
  // @@protoc_insertion_point(field_release:files.KsongAudiosGetRequest.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KsongAudiosGetRequest::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:files.KsongAudiosGetRequest.file_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace files

// @@protoc_insertion_point(global_scope)
